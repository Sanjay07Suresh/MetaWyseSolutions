

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Mon Dec 02 14:11:03 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    13                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2,group=1
    19                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=1
    20                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,space=0,delta=2
    22                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    28                           	dabs	1,0x7E,2
    29     0000                     
    30                           ; Generated 12/10/2023 GMT
    31                           ; 
    32                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution. Publication is not required when
    46                           ;        this file is used in an embedded application.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F877A Definitions
    62                           ; 
    63                           ; SFR Addresses
    64     0004                     fsr             equ	4
    65     0004                     fsr0            equ	4
    66     0000                     indf            equ	0
    67     0000                     indf0           equ	0
    68     0002                     pc              equ	2
    69     0002                     pcl             equ	2
    70     000A                     pclath          equ	10
    71     0003                     status          equ	3
    72     0000                     INDF            equ	0	;# 
    73     0001                     TMR0            equ	1	;# 
    74     0002                     PCL             equ	2	;# 
    75     0003                     STATUS          equ	3	;# 
    76     0004                     FSR             equ	4	;# 
    77     0005                     PORTA           equ	5	;# 
    78     0006                     PORTB           equ	6	;# 
    79     0007                     PORTC           equ	7	;# 
    80     0008                     PORTD           equ	8	;# 
    81     0009                     PORTE           equ	9	;# 
    82     000A                     PCLATH          equ	10	;# 
    83     000B                     INTCON          equ	11	;# 
    84     000C                     PIR1            equ	12	;# 
    85     000D                     PIR2            equ	13	;# 
    86     000E                     TMR1            equ	14	;# 
    87     000E                     TMR1L           equ	14	;# 
    88     000F                     TMR1H           equ	15	;# 
    89     0010                     T1CON           equ	16	;# 
    90     0011                     TMR2            equ	17	;# 
    91     0012                     T2CON           equ	18	;# 
    92     0013                     SSPBUF          equ	19	;# 
    93     0014                     SSPCON          equ	20	;# 
    94     0015                     CCPR1           equ	21	;# 
    95     0015                     CCPR1L          equ	21	;# 
    96     0016                     CCPR1H          equ	22	;# 
    97     0017                     CCP1CON         equ	23	;# 
    98     0018                     RCSTA           equ	24	;# 
    99     0019                     TXREG           equ	25	;# 
   100     001A                     RCREG           equ	26	;# 
   101     001B                     CCPR2           equ	27	;# 
   102     001B                     CCPR2L          equ	27	;# 
   103     001C                     CCPR2H          equ	28	;# 
   104     001D                     CCP2CON         equ	29	;# 
   105     001E                     ADRESH          equ	30	;# 
   106     001F                     ADCON0          equ	31	;# 
   107     0081                     OPTION_REG      equ	129	;# 
   108     0085                     TRISA           equ	133	;# 
   109     0086                     TRISB           equ	134	;# 
   110     0087                     TRISC           equ	135	;# 
   111     0088                     TRISD           equ	136	;# 
   112     0089                     TRISE           equ	137	;# 
   113     008C                     PIE1            equ	140	;# 
   114     008D                     PIE2            equ	141	;# 
   115     008E                     PCON            equ	142	;# 
   116     0091                     SSPCON2         equ	145	;# 
   117     0092                     PR2             equ	146	;# 
   118     0093                     SSPADD          equ	147	;# 
   119     0094                     SSPSTAT         equ	148	;# 
   120     0098                     TXSTA           equ	152	;# 
   121     0099                     SPBRG           equ	153	;# 
   122     009C                     CMCON           equ	156	;# 
   123     009D                     CVRCON          equ	157	;# 
   124     009E                     ADRESL          equ	158	;# 
   125     009F                     ADCON1          equ	159	;# 
   126     010C                     EEDATA          equ	268	;# 
   127     010D                     EEADR           equ	269	;# 
   128     010E                     EEDATH          equ	270	;# 
   129     010F                     EEADRH          equ	271	;# 
   130     018C                     EECON1          equ	396	;# 
   131     018D                     EECON2          equ	397	;# 
   132     0000                     INDF            equ	0	;# 
   133     0001                     TMR0            equ	1	;# 
   134     0002                     PCL             equ	2	;# 
   135     0003                     STATUS          equ	3	;# 
   136     0004                     FSR             equ	4	;# 
   137     0005                     PORTA           equ	5	;# 
   138     0006                     PORTB           equ	6	;# 
   139     0007                     PORTC           equ	7	;# 
   140     0008                     PORTD           equ	8	;# 
   141     0009                     PORTE           equ	9	;# 
   142     000A                     PCLATH          equ	10	;# 
   143     000B                     INTCON          equ	11	;# 
   144     000C                     PIR1            equ	12	;# 
   145     000D                     PIR2            equ	13	;# 
   146     000E                     TMR1            equ	14	;# 
   147     000E                     TMR1L           equ	14	;# 
   148     000F                     TMR1H           equ	15	;# 
   149     0010                     T1CON           equ	16	;# 
   150     0011                     TMR2            equ	17	;# 
   151     0012                     T2CON           equ	18	;# 
   152     0013                     SSPBUF          equ	19	;# 
   153     0014                     SSPCON          equ	20	;# 
   154     0015                     CCPR1           equ	21	;# 
   155     0015                     CCPR1L          equ	21	;# 
   156     0016                     CCPR1H          equ	22	;# 
   157     0017                     CCP1CON         equ	23	;# 
   158     0018                     RCSTA           equ	24	;# 
   159     0019                     TXREG           equ	25	;# 
   160     001A                     RCREG           equ	26	;# 
   161     001B                     CCPR2           equ	27	;# 
   162     001B                     CCPR2L          equ	27	;# 
   163     001C                     CCPR2H          equ	28	;# 
   164     001D                     CCP2CON         equ	29	;# 
   165     001E                     ADRESH          equ	30	;# 
   166     001F                     ADCON0          equ	31	;# 
   167     0081                     OPTION_REG      equ	129	;# 
   168     0085                     TRISA           equ	133	;# 
   169     0086                     TRISB           equ	134	;# 
   170     0087                     TRISC           equ	135	;# 
   171     0088                     TRISD           equ	136	;# 
   172     0089                     TRISE           equ	137	;# 
   173     008C                     PIE1            equ	140	;# 
   174     008D                     PIE2            equ	141	;# 
   175     008E                     PCON            equ	142	;# 
   176     0091                     SSPCON2         equ	145	;# 
   177     0092                     PR2             equ	146	;# 
   178     0093                     SSPADD          equ	147	;# 
   179     0094                     SSPSTAT         equ	148	;# 
   180     0098                     TXSTA           equ	152	;# 
   181     0099                     SPBRG           equ	153	;# 
   182     009C                     CMCON           equ	156	;# 
   183     009D                     CVRCON          equ	157	;# 
   184     009E                     ADRESL          equ	158	;# 
   185     009F                     ADCON1          equ	159	;# 
   186     010C                     EEDATA          equ	268	;# 
   187     010D                     EEADR           equ	269	;# 
   188     010E                     EEDATH          equ	270	;# 
   189     010F                     EEADRH          equ	271	;# 
   190     018C                     EECON1          equ	396	;# 
   191     018D                     EECON2          equ	397	;# 
   192                           
   193                           	psect	idataCOMMON
   194     0356                     __pidataCOMMON:
   195                           
   196                           ;initializer for _prevButtonState
   197     0356  3401               	retlw	1
   198     000B                     _INTCONbits     set	11
   199     0010                     _T1CON          set	16
   200     0019                     _TXREG          set	25
   201     0018                     _RCSTA          set	24
   202     0030                     _RB0            set	48
   203     0060                     _TMR1IF         set	96
   204     0064                     _TXIF           set	100
   205     008C                     _PIE1bits       set	140
   206     0099                     _SPBRG          set	153
   207     0098                     _TXSTA          set	152
   208     0081                     _OPTION_REGbits set	129
   209     0086                     _TRISBbits      set	134
   210     0087                     _TRISCbits      set	135
   211                           
   212                           	psect	strings
   213     0269                     __pstrings:
   214     0269                     stringtab:
   215     0269                     __stringtab:
   216     0269                     stringcode:	
   217                           ;	String table - string pointers are 1 byte each
   218                           
   219     0269                     stringdir:
   220     0269  3002               	movlw	high stringdir
   221     026A  008A               	movwf	10
   222     026B  0804               	movf	4,w
   223     026C  0A84               	incf	4,f
   224     026D  0782               	addwf	2,f
   225     026E                     __stringbase:
   226     026E  3400               	retlw	0
   227     026F                     __end_of__stringtab:
   228     026F                     STR_1:
   229     026F  3442               	retlw	66	;'B'
   230     0270  3475               	retlw	117	;'u'
   231     0271  3474               	retlw	116	;'t'
   232     0272  3474               	retlw	116	;'t'
   233     0273  346F               	retlw	111	;'o'
   234     0274  346E               	retlw	110	;'n'
   235     0275  3420               	retlw	32	;' '
   236     0276  3450               	retlw	80	;'P'
   237     0277  3472               	retlw	114	;'r'
   238     0278  3465               	retlw	101	;'e'
   239     0279  3473               	retlw	115	;'s'
   240     027A  3473               	retlw	115	;'s'
   241     027B  3465               	retlw	101	;'e'
   242     027C  3473               	retlw	115	;'s'
   243     027D  3420               	retlw	32	;' '
   244     027E  3469               	retlw	105	;'i'
   245     027F  346E               	retlw	110	;'n'
   246     0280  3420               	retlw	32	;' '
   247     0281  3474               	retlw	116	;'t'
   248     0282  3468               	retlw	104	;'h'
   249     0283  3465               	retlw	101	;'e'
   250     0284  3420               	retlw	32	;' '
   251     0285  346C               	retlw	108	;'l'
   252     0286  3461               	retlw	97	;'a'
   253     0287  3473               	retlw	115	;'s'
   254     0288  3474               	retlw	116	;'t'
   255     0289  3420               	retlw	32	;' '
   256     028A  3436               	retlw	54	;'6'
   257     028B  3430               	retlw	48	;'0'
   258     028C  3420               	retlw	32	;' '
   259     028D  3473               	retlw	115	;'s'
   260     028E  3465               	retlw	101	;'e'
   261     028F  3463               	retlw	99	;'c'
   262     0290  346F               	retlw	111	;'o'
   263     0291  346E               	retlw	110	;'n'
   264     0292  3464               	retlw	100	;'d'
   265     0293  3473               	retlw	115	;'s'
   266     0294  343A               	retlw	58	;':'
   267     0295  3420               	retlw	32	;' '
   268     0296  3400               	retlw	0
   269     0297                     STR_2:
   270     0297  3442               	retlw	66	;'B'
   271     0298  3475               	retlw	117	;'u'
   272     0299  3474               	retlw	116	;'t'
   273     029A  3474               	retlw	116	;'t'
   274     029B  346F               	retlw	111	;'o'
   275     029C  346E               	retlw	110	;'n'
   276     029D  3420               	retlw	32	;' '
   277     029E  3450               	retlw	80	;'P'
   278     029F  3472               	retlw	114	;'r'
   279     02A0  3465               	retlw	101	;'e'
   280     02A1  3473               	retlw	115	;'s'
   281     02A2  3473               	retlw	115	;'s'
   282     02A3  3420               	retlw	32	;' '
   283     02A4  3444               	retlw	68	;'D'
   284     02A5  3465               	retlw	101	;'e'
   285     02A6  3474               	retlw	116	;'t'
   286     02A7  3465               	retlw	101	;'e'
   287     02A8  3463               	retlw	99	;'c'
   288     02A9  3474               	retlw	116	;'t'
   289     02AA  3465               	retlw	101	;'e'
   290     02AB  3464               	retlw	100	;'d'
   291     02AC  342E               	retlw	46	;'.'
   292     02AD  3420               	retlw	32	;' '
   293     02AE  3443               	retlw	67	;'C'
   294     02AF  346F               	retlw	111	;'o'
   295     02B0  3475               	retlw	117	;'u'
   296     02B1  346E               	retlw	110	;'n'
   297     02B2  3474               	retlw	116	;'t'
   298     02B3  343A               	retlw	58	;':'
   299     02B4  3420               	retlw	32	;' '
   300     02B5  3400               	retlw	0
   301                           
   302                           	psect	cinit
   303     0015                     start_initialization:	
   304                           ; #config settings
   305                           
   306     0015                     __initialization:
   307                           
   308                           ; Initialize objects allocated to COMMON
   309     0015  120A  118A  2356  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   310     001A  00FD               	movwf	__pdataCOMMON& (0+127)
   311                           
   312                           ; Clear objects allocated to BANK0
   313     001B  01AE               	clrf	__pbssBANK0& (0+127)
   314     001C  01AF               	clrf	(__pbssBANK0+1)& (0+127)
   315     001D  01B0               	clrf	(__pbssBANK0+2)& (0+127)
   316     001E  01B1               	clrf	(__pbssBANK0+3)& (0+127)
   317                           
   318                           ; Clear objects allocated to COMMON
   319     001F  01FC               	clrf	__pbssCOMMON& (0+127)
   320     0020                     end_of_initialization:	
   321                           ;End of C runtime variable initialization code
   322                           
   323     0020                     __end_of__initialization:
   324     0020  0183               	clrf	3
   325     0021  120A  118A  2824   	ljmp	_main	;jump to C main() function
   326                           
   327                           	psect	bssCOMMON
   328     007C                     __pbssCOMMON:
   329     007C                     _buttonPresses:
   330     007C                     	ds	1
   331                           
   332                           	psect	dataCOMMON
   333     007D                     __pdataCOMMON:
   334     007D                     _prevButtonState:
   335     007D                     	ds	1
   336                           
   337                           	psect	bssBANK0
   338     002E                     __pbssBANK0:
   339     002E                     _seconds:
   340     002E                     	ds	2
   341     0030                     _overflowCount:
   342     0030                     	ds	2
   343                           
   344                           	psect	cstackCOMMON
   345     0070                     __pcstackCOMMON:
   346     0070                     ?_ser_int:
   347     0070                     ?_timer1Init:	
   348                           ; 1 bytes @ 0x0
   349                           
   350     0070                     ?_interrupt_init:	
   351                           ; 1 bytes @ 0x0
   352                           
   353     0070                     ?_tx:	
   354                           ; 1 bytes @ 0x0
   355                           
   356     0070                     ?_buttonISR:	
   357                           ; 1 bytes @ 0x0
   358                           
   359     0070                     ?_main:	
   360                           ; 1 bytes @ 0x0
   361                           
   362     0070                     ?_ISR:	
   363                           ; 1 bytes @ 0x0
   364                           
   365     0070                     ?i1_tx:	
   366                           ; 1 bytes @ 0x0
   367                           
   368     0070                     ?i1___awdiv:	
   369                           ; 1 bytes @ 0x0
   370                           
   371     0070                     ?i1___awmod:	
   372                           ; 2 bytes @ 0x0
   373                           
   374     0070                     i1tx@a:	
   375                           ; 2 bytes @ 0x0
   376                           
   377     0070                     i1___awdiv@divisor:	
   378                           ; 1 bytes @ 0x0
   379                           
   380     0070                     i1___awmod@divisor:	
   381                           ; 2 bytes @ 0x0
   382                           
   383     0070                     ??i1_tx:	
   384                           ; 2 bytes @ 0x0
   385                           
   386                           
   387                           ; 1 bytes @ 0x0
   388     0070                     	ds	1
   389     0071                     ?i1_txstr:
   390     0071                     i1txstr@a:	
   391                           ; 1 bytes @ 0x1
   392                           
   393                           
   394                           ; 1 bytes @ 0x1
   395     0071                     	ds	1
   396     0072                     i1___awdiv@dividend:
   397     0072                     i1___awmod@dividend:	
   398                           ; 2 bytes @ 0x2
   399                           
   400     0072                     ??i1_txstr:	
   401                           ; 2 bytes @ 0x2
   402                           
   403                           
   404                           ; 1 bytes @ 0x2
   405     0072                     	ds	2
   406     0074                     i1___awdiv@counter:
   407     0074                     i1___awmod@counter:	
   408                           ; 1 bytes @ 0x4
   409                           
   410     0074                     ??i1___awdiv:	
   411                           ; 1 bytes @ 0x4
   412                           
   413     0074                     ??i1___awmod:	
   414                           ; 1 bytes @ 0x4
   415                           
   416                           
   417                           ; 1 bytes @ 0x4
   418     0074                     	ds	1
   419     0075                     i1___awdiv@sign:
   420     0075                     i1___awmod@sign:	
   421                           ; 1 bytes @ 0x5
   422                           
   423                           
   424                           ; 1 bytes @ 0x5
   425     0075                     	ds	1
   426     0076                     i1___awdiv@quotient:
   427                           
   428                           ; 2 bytes @ 0x6
   429     0076                     	ds	2
   430     0078                     ??_buttonISR:
   431                           
   432                           ; 1 bytes @ 0x8
   433     0078                     	ds	3
   434     007B                     buttonISR@currentButtonState:
   435                           
   436                           ; 1 bytes @ 0xB
   437     007B                     	ds	1
   438                           
   439                           	psect	cstackBANK0
   440     0020                     __pcstackBANK0:
   441     0020                     ??_ISR:
   442                           
   443                           ; 1 bytes @ 0x0
   444     0020                     	ds	4
   445     0024                     ?___awdiv:
   446     0024                     ?___awmod:	
   447                           ; 2 bytes @ 0x4
   448                           
   449     0024                     tx@a:	
   450                           ; 2 bytes @ 0x4
   451                           
   452     0024                     ___awdiv@divisor:	
   453                           ; 1 bytes @ 0x4
   454                           
   455     0024                     ___awmod@divisor:	
   456                           ; 2 bytes @ 0x4
   457                           
   458     0024                     ??_ser_int:	
   459                           ; 2 bytes @ 0x4
   460                           
   461     0024                     ??_timer1Init:	
   462                           ; 1 bytes @ 0x4
   463                           
   464     0024                     ??_interrupt_init:	
   465                           ; 1 bytes @ 0x4
   466                           
   467     0024                     ??_tx:	
   468                           ; 1 bytes @ 0x4
   469                           
   470                           
   471                           ; 1 bytes @ 0x4
   472     0024                     	ds	1
   473     0025                     ?_txstr:
   474     0025                     txstr@a:	
   475                           ; 1 bytes @ 0x5
   476                           
   477                           
   478                           ; 1 bytes @ 0x5
   479     0025                     	ds	1
   480     0026                     ___awdiv@dividend:
   481     0026                     ___awmod@dividend:	
   482                           ; 2 bytes @ 0x6
   483                           
   484     0026                     ??_txstr:	
   485                           ; 2 bytes @ 0x6
   486                           
   487                           
   488                           ; 1 bytes @ 0x6
   489     0026                     	ds	2
   490     0028                     ___awdiv@counter:
   491     0028                     ___awmod@counter:	
   492                           ; 1 bytes @ 0x8
   493                           
   494     0028                     ??___awdiv:	
   495                           ; 1 bytes @ 0x8
   496                           
   497     0028                     ??___awmod:	
   498                           ; 1 bytes @ 0x8
   499                           
   500                           
   501                           ; 1 bytes @ 0x8
   502     0028                     	ds	1
   503     0029                     ___awdiv@sign:
   504     0029                     ___awmod@sign:	
   505                           ; 1 bytes @ 0x9
   506                           
   507                           
   508                           ; 1 bytes @ 0x9
   509     0029                     	ds	1
   510     002A                     ___awdiv@quotient:
   511                           
   512                           ; 2 bytes @ 0xA
   513     002A                     	ds	2
   514     002C                     ??_main:
   515                           
   516                           ; 1 bytes @ 0xC
   517     002C                     	ds	2
   518                           
   519                           	psect	maintext
   520     0024                     __pmaintext:	
   521 ;;
   522 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   523 ;;
   524 ;; *************** function _main *****************
   525 ;; Defined at:
   526 ;;		line 27 in file "main.c"
   527 ;; Parameters:    Size  Location     Type
   528 ;;		None
   529 ;; Auto vars:     Size  Location     Type
   530 ;;		None
   531 ;; Return value:  Size  Location     Type
   532 ;;                  1    wreg      void 
   533 ;; Registers used:
   534 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   535 ;; Tracked objects:
   536 ;;		On entry : B00/0
   537 ;;		On exit  : 0/0
   538 ;;		Unchanged: 0/0
   539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   540 ;;      Params:         0       0       0       0       0
   541 ;;      Locals:         0       0       0       0       0
   542 ;;      Temps:          0       2       0       0       0
   543 ;;      Totals:         0       2       0       0       0
   544 ;;Total ram usage:        2 bytes
   545 ;; Hardware stack levels required when called: 6
   546 ;; This function calls:
   547 ;;		___awdiv
   548 ;;		___awmod
   549 ;;		_interrupt_init
   550 ;;		_ser_int
   551 ;;		_timer1Init
   552 ;;		_tx
   553 ;;		_txstr
   554 ;; This function is called by:
   555 ;;		Startup code after reset
   556 ;; This function uses a non-reentrant model
   557 ;;
   558                           
   559     0024                     _main:	
   560                           ;psect for function _main
   561                           
   562     0024                     l1103:	
   563                           ;incstack = 0
   564                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   565                           
   566                           
   567                           ;main.c: 28:     TRISCbits.TRISC7 = 1;
   568     0024  1683               	bsf	3,5	;RP0=1, select bank1
   569     0025  1303               	bcf	3,6	;RP1=0, select bank1
   570     0026  1787               	bsf	7,7	;volatile
   571                           
   572                           ;main.c: 29:     TRISCbits.TRISC6 = 0;
   573     0027  1307               	bcf	7,6	;volatile
   574                           
   575                           ;main.c: 30:     TRISBbits.TRISB0 = 1;
   576     0028  1406               	bsf	6,0	;volatile
   577                           
   578                           ;main.c: 31:     OPTION_REGbits.nRBPU = 0;
   579     0029  1381               	bcf	1,7	;volatile
   580     002A                     l1105:
   581                           
   582                           ;main.c: 32:     ser_int();
   583     002A  120A  118A  2323  120A  118A  	fcall	_ser_int
   584                           
   585                           ;main.c: 33:     timer1Init();
   586     002F  120A  118A  233A  120A  118A  	fcall	_timer1Init
   587                           
   588                           ;main.c: 34:     interrupt_init();
   589     0034  120A  118A  234E  120A  118A  	fcall	_interrupt_init
   590     0039                     l1107:
   591                           
   592                           ;main.c: 37:         if (seconds >= 60) {
   593     0039  3000               	movlw	0
   594     003A  1283               	bcf	3,5	;RP0=0, select bank0
   595     003B  1303               	bcf	3,6	;RP1=0, select bank0
   596     003C  022F               	subwf	_seconds+1,w	;volatile
   597     003D  303C               	movlw	60
   598     003E  1903               	skipnz
   599     003F  022E               	subwf	_seconds,w	;volatile
   600     0040  1C03               	skipc
   601     0041  2843               	goto	u951
   602     0042  2844               	goto	u950
   603     0043                     u951:
   604     0043  2839               	goto	l1107
   605     0044                     u950:
   606     0044                     l1109:
   607                           
   608                           ;main.c: 38:             seconds = 0;
   609     0044  01AE               	clrf	_seconds	;volatile
   610     0045  01AF               	clrf	_seconds+1	;volatile
   611     0046                     l1111:
   612                           
   613                           ;main.c: 39:             txstr("Button Presses in the last 60 seconds: ");
   614     0046  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   615     0047  00A5               	movwf	txstr@a
   616     0048  120A  118A  22E7  120A  118A  	fcall	_txstr
   617     004D                     l1113:
   618                           
   619                           ;main.c: 40:             tx((buttonPresses / 10) + '0');
   620     004D  300A               	movlw	10
   621     004E  1283               	bcf	3,5	;RP0=0, select bank0
   622     004F  1303               	bcf	3,6	;RP1=0, select bank0
   623     0050  00A4               	movwf	___awdiv@divisor
   624     0051  3000               	movlw	0
   625     0052  00A5               	movwf	___awdiv@divisor+1
   626     0053  087C               	movf	_buttonPresses,w	;volatile
   627     0054  00AC               	movwf	??_main
   628     0055  01AD               	clrf	??_main+1
   629     0056  082C               	movf	??_main,w
   630     0057  00A6               	movwf	___awdiv@dividend
   631     0058  082D               	movf	??_main+1,w
   632     0059  00A7               	movwf	___awdiv@dividend+1
   633     005A  120A  118A  208E  120A  118A  	fcall	___awdiv
   634     005F  1283               	bcf	3,5	;RP0=0, select bank0
   635     0060  1303               	bcf	3,6	;RP1=0, select bank0
   636     0061  0824               	movf	?___awdiv,w
   637     0062  3E30               	addlw	48
   638     0063  120A  118A  2330  120A  118A  	fcall	_tx
   639     0068                     l1115:
   640                           
   641                           ;main.c: 41:             tx((buttonPresses % 10) + '0');
   642     0068  300A               	movlw	10
   643     0069  1283               	bcf	3,5	;RP0=0, select bank0
   644     006A  1303               	bcf	3,6	;RP1=0, select bank0
   645     006B  00A4               	movwf	___awmod@divisor
   646     006C  3000               	movlw	0
   647     006D  00A5               	movwf	___awmod@divisor+1
   648     006E  087C               	movf	_buttonPresses,w	;volatile
   649     006F  00AC               	movwf	??_main
   650     0070  01AD               	clrf	??_main+1
   651     0071  082C               	movf	??_main,w
   652     0072  00A6               	movwf	___awmod@dividend
   653     0073  082D               	movf	??_main+1,w
   654     0074  00A7               	movwf	___awmod@dividend+1
   655     0075  120A  118A  21B9  120A  118A  	fcall	___awmod
   656     007A  1283               	bcf	3,5	;RP0=0, select bank0
   657     007B  1303               	bcf	3,6	;RP1=0, select bank0
   658     007C  0824               	movf	?___awmod,w
   659     007D  3E30               	addlw	48
   660     007E  120A  118A  2330  120A  118A  	fcall	_tx
   661     0083                     l1117:
   662                           
   663                           ;main.c: 42:             tx('\n');
   664     0083  300A               	movlw	10
   665     0084  120A  118A  2330  120A  118A  	fcall	_tx
   666     0089                     l1119:
   667                           
   668                           ;main.c: 43:             buttonPresses = 0;
   669     0089  01FC               	clrf	_buttonPresses	;volatile
   670     008A  2839               	goto	l1107
   671     008B  120A  118A  2812   	ljmp	start
   672     008E                     __end_of_main:
   673                           
   674                           	psect	text1
   675     02E7                     __ptext1:	
   676 ;; *************** function _txstr *****************
   677 ;; Defined at:
   678 ;;		line 59 in file "main.c"
   679 ;; Parameters:    Size  Location     Type
   680 ;;  a               1    5[BANK0 ] PTR const unsigned char 
   681 ;;		 -> STR_2(31), STR_1(40), 
   682 ;; Auto vars:     Size  Location     Type
   683 ;;		None
   684 ;; Return value:  Size  Location     Type
   685 ;;                  1    wreg      void 
   686 ;; Registers used:
   687 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   688 ;; Tracked objects:
   689 ;;		On entry : 0/0
   690 ;;		On exit  : 0/0
   691 ;;		Unchanged: 0/0
   692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   693 ;;      Params:         0       1       0       0       0
   694 ;;      Locals:         0       0       0       0       0
   695 ;;      Temps:          0       0       0       0       0
   696 ;;      Totals:         0       1       0       0       0
   697 ;;Total ram usage:        1 bytes
   698 ;; Hardware stack levels used: 1
   699 ;; Hardware stack levels required when called: 5
   700 ;; This function calls:
   701 ;;		_tx
   702 ;; This function is called by:
   703 ;;		_main
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707     02E7                     _txstr:	
   708                           ;psect for function _txstr
   709                           
   710     02E7                     l991:	
   711                           ;incstack = 0
   712                           ; Regs used in _txstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   713                           
   714                           
   715                           ;main.c: 60:     while (*a) {
   716     02E7  2AF8               	goto	l997
   717     02E8                     l993:
   718                           
   719                           ;main.c: 61:         tx(*a++);
   720     02E8  0825               	movf	txstr@a,w
   721     02E9  0084               	movwf	4
   722     02EA  120A  118A  2269  120A  118A  	fcall	stringdir
   723     02EF  120A  118A  2330  120A  118A  	fcall	_tx
   724     02F4                     l995:
   725     02F4  3001               	movlw	1
   726     02F5  1283               	bcf	3,5	;RP0=0, select bank0
   727     02F6  1303               	bcf	3,6	;RP1=0, select bank0
   728     02F7  07A5               	addwf	txstr@a,f
   729     02F8                     l997:
   730                           
   731                           ;main.c: 60:     while (*a) {
   732     02F8  1283               	bcf	3,5	;RP0=0, select bank0
   733     02F9  1303               	bcf	3,6	;RP1=0, select bank0
   734     02FA  0825               	movf	txstr@a,w
   735     02FB  0084               	movwf	4
   736     02FC  120A  118A  2269  120A  118A  	fcall	stringdir
   737     0301  3A00               	xorlw	0
   738     0302  1D03               	skipz
   739     0303  2B05               	goto	u721
   740     0304  2B06               	goto	u720
   741     0305                     u721:
   742     0305  2AE8               	goto	l993
   743     0306                     u720:
   744     0306                     l72:
   745     0306  0008               	return
   746     0307                     __end_of_txstr:
   747                           
   748                           	psect	text2
   749     0330                     __ptext2:	
   750 ;; *************** function _tx *****************
   751 ;; Defined at:
   752 ;;		line 54 in file "main.c"
   753 ;; Parameters:    Size  Location     Type
   754 ;;  a               1    wreg     unsigned char 
   755 ;; Auto vars:     Size  Location     Type
   756 ;;  a               1    4[BANK0 ] unsigned char 
   757 ;; Return value:  Size  Location     Type
   758 ;;                  1    wreg      void 
   759 ;; Registers used:
   760 ;;		wreg
   761 ;; Tracked objects:
   762 ;;		On entry : 0/0
   763 ;;		On exit  : 0/0
   764 ;;		Unchanged: 0/0
   765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   766 ;;      Params:         0       0       0       0       0
   767 ;;      Locals:         0       1       0       0       0
   768 ;;      Temps:          0       0       0       0       0
   769 ;;      Totals:         0       1       0       0       0
   770 ;;Total ram usage:        1 bytes
   771 ;; Hardware stack levels used: 1
   772 ;; Hardware stack levels required when called: 4
   773 ;; This function calls:
   774 ;;		Nothing
   775 ;; This function is called by:
   776 ;;		_main
   777 ;;		_txstr
   778 ;; This function uses a non-reentrant model
   779 ;;
   780                           
   781     0330                     _tx:	
   782                           ;psect for function _tx
   783                           
   784                           
   785                           ;incstack = 0
   786                           ; Regs used in _tx: [wreg]
   787                           ;tx@a stored from wreg
   788     0330  1283               	bcf	3,5	;RP0=0, select bank0
   789     0331  1303               	bcf	3,6	;RP1=0, select bank0
   790     0332  00A4               	movwf	tx@a
   791     0333                     l891:
   792     0333                     l63:	
   793                           ;main.c: 55:     while (!TXIF);
   794                           
   795     0333  1E0C               	btfss	12,4	;volatile
   796     0334  2B36               	goto	u511
   797     0335  2B37               	goto	u510
   798     0336                     u511:
   799     0336  2B33               	goto	l63
   800     0337                     u510:
   801     0337                     l893:
   802                           
   803                           ;main.c: 56:     TXREG = a;
   804     0337  0824               	movf	tx@a,w
   805     0338  0099               	movwf	25	;volatile
   806     0339                     l66:
   807     0339  0008               	return
   808     033A                     __end_of_tx:
   809                           
   810                           	psect	text3
   811     033A                     __ptext3:	
   812 ;; *************** function _timer1Init *****************
   813 ;; Defined at:
   814 ;;		line 65 in file "main.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;		None
   819 ;; Return value:  Size  Location     Type
   820 ;;                  1    wreg      void 
   821 ;; Registers used:
   822 ;;		None
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   828 ;;      Params:         0       0       0       0       0
   829 ;;      Locals:         0       0       0       0       0
   830 ;;      Temps:          0       0       0       0       0
   831 ;;      Totals:         0       0       0       0       0
   832 ;;Total ram usage:        0 bytes
   833 ;; Hardware stack levels used: 1
   834 ;; Hardware stack levels required when called: 4
   835 ;; This function calls:
   836 ;;		Nothing
   837 ;; This function is called by:
   838 ;;		_main
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842     033A                     _timer1Init:	
   843                           ;psect for function _timer1Init
   844                           
   845     033A                     l987:	
   846                           ;incstack = 0
   847                           ; Regs used in _timer1Init: []
   848                           
   849                           
   850                           ;main.c: 66:     T1CON = 0x31;
   851     033A  3031               	movlw	49
   852     033B  1283               	bcf	3,5	;RP0=0, select bank0
   853     033C  1303               	bcf	3,6	;RP1=0, select bank0
   854     033D  0090               	movwf	16	;volatile
   855                           
   856                           ;main.c: 67:     PIE1bits.TMR1IE = 1;
   857     033E  1683               	bsf	3,5	;RP0=1, select bank1
   858     033F  1303               	bcf	3,6	;RP1=0, select bank1
   859     0340  140C               	bsf	12,0	;volatile
   860                           
   861                           ;main.c: 68:     INTCONbits.PEIE = 1;
   862     0341  170B               	bsf	11,6	;volatile
   863                           
   864                           ;main.c: 69:     INTCONbits.GIE = 1;
   865     0342  178B               	bsf	11,7	;volatile
   866     0343                     l75:
   867     0343  0008               	return
   868     0344                     __end_of_timer1Init:
   869                           
   870                           	psect	text4
   871     0323                     __ptext4:	
   872 ;; *************** function _ser_int *****************
   873 ;; Defined at:
   874 ;;		line 48 in file "main.c"
   875 ;; Parameters:    Size  Location     Type
   876 ;;		None
   877 ;; Auto vars:     Size  Location     Type
   878 ;;		None
   879 ;; Return value:  Size  Location     Type
   880 ;;                  1    wreg      void 
   881 ;; Registers used:
   882 ;;		None
   883 ;; Tracked objects:
   884 ;;		On entry : 0/0
   885 ;;		On exit  : 0/0
   886 ;;		Unchanged: 0/0
   887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   888 ;;      Params:         0       0       0       0       0
   889 ;;      Locals:         0       0       0       0       0
   890 ;;      Temps:          0       0       0       0       0
   891 ;;      Totals:         0       0       0       0       0
   892 ;;Total ram usage:        0 bytes
   893 ;; Hardware stack levels used: 1
   894 ;; Hardware stack levels required when called: 4
   895 ;; This function calls:
   896 ;;		Nothing
   897 ;; This function is called by:
   898 ;;		_main
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902     0323                     _ser_int:	
   903                           ;psect for function _ser_int
   904                           
   905     0323                     l985:	
   906                           ;incstack = 0
   907                           ; Regs used in _ser_int: []
   908                           
   909                           
   910                           ;main.c: 49:     TXSTA = 0x20;
   911     0323  3020               	movlw	32
   912     0324  1683               	bsf	3,5	;RP0=1, select bank1
   913     0325  1303               	bcf	3,6	;RP1=0, select bank1
   914     0326  0098               	movwf	24	;volatile
   915                           
   916                           ;main.c: 50:     RCSTA = 0x90;
   917     0327  3090               	movlw	144
   918     0328  1283               	bcf	3,5	;RP0=0, select bank0
   919     0329  1303               	bcf	3,6	;RP1=0, select bank0
   920     032A  0098               	movwf	24	;volatile
   921                           
   922                           ;main.c: 51:     SPBRG = 31;
   923     032B  301F               	movlw	31
   924     032C  1683               	bsf	3,5	;RP0=1, select bank1
   925     032D  1303               	bcf	3,6	;RP1=0, select bank1
   926     032E  0099               	movwf	25	;volatile
   927     032F                     l60:
   928     032F  0008               	return
   929     0330                     __end_of_ser_int:
   930                           
   931                           	psect	text5
   932     034E                     __ptext5:	
   933 ;; *************** function _interrupt_init *****************
   934 ;; Defined at:
   935 ;;		line 72 in file "main.c"
   936 ;; Parameters:    Size  Location     Type
   937 ;;		None
   938 ;; Auto vars:     Size  Location     Type
   939 ;;		None
   940 ;; Return value:  Size  Location     Type
   941 ;;                  1    wreg      void 
   942 ;; Registers used:
   943 ;;		None
   944 ;; Tracked objects:
   945 ;;		On entry : 0/0
   946 ;;		On exit  : 0/0
   947 ;;		Unchanged: 0/0
   948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   949 ;;      Params:         0       0       0       0       0
   950 ;;      Locals:         0       0       0       0       0
   951 ;;      Temps:          0       0       0       0       0
   952 ;;      Totals:         0       0       0       0       0
   953 ;;Total ram usage:        0 bytes
   954 ;; Hardware stack levels used: 1
   955 ;; Hardware stack levels required when called: 4
   956 ;; This function calls:
   957 ;;		Nothing
   958 ;; This function is called by:
   959 ;;		_main
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963     034E                     _interrupt_init:	
   964                           ;psect for function _interrupt_init
   965                           
   966     034E                     l989:	
   967                           ;incstack = 0
   968                           ; Regs used in _interrupt_init: []
   969                           
   970                           
   971                           ;main.c: 73:     INTCONbits.GIE = 1;
   972     034E  178B               	bsf	11,7	;volatile
   973                           
   974                           ;main.c: 74:     INTCONbits.PEIE = 1;
   975     034F  170B               	bsf	11,6	;volatile
   976                           
   977                           ;main.c: 75:     INTCONbits.INTE = 1;
   978     0350  160B               	bsf	11,4	;volatile
   979                           
   980                           ;main.c: 76:     OPTION_REGbits.INTEDG = 0;
   981     0351  1683               	bsf	3,5	;RP0=1, select bank1
   982     0352  1303               	bcf	3,6	;RP1=0, select bank1
   983     0353  1301               	bcf	1,6	;volatile
   984                           
   985                           ;main.c: 77:     INTCONbits.INTF = 0;
   986     0354  108B               	bcf	11,1	;volatile
   987     0355                     l78:
   988     0355  0008               	return
   989     0356                     __end_of_interrupt_init:
   990                           
   991                           	psect	text6
   992     01B9                     __ptext6:	
   993 ;; *************** function ___awmod *****************
   994 ;; Defined at:
   995 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
   996 ;; Parameters:    Size  Location     Type
   997 ;;  divisor         2    4[BANK0 ] int 
   998 ;;  dividend        2    6[BANK0 ] int 
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;  sign            1    9[BANK0 ] unsigned char 
  1001 ;;  counter         1    8[BANK0 ] unsigned char 
  1002 ;; Return value:  Size  Location     Type
  1003 ;;                  2    4[BANK0 ] int 
  1004 ;; Registers used:
  1005 ;;		wreg, status,2, status,0
  1006 ;; Tracked objects:
  1007 ;;		On entry : 0/0
  1008 ;;		On exit  : 0/0
  1009 ;;		Unchanged: 0/0
  1010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1011 ;;      Params:         0       4       0       0       0
  1012 ;;      Locals:         0       2       0       0       0
  1013 ;;      Temps:          0       0       0       0       0
  1014 ;;      Totals:         0       6       0       0       0
  1015 ;;Total ram usage:        6 bytes
  1016 ;; Hardware stack levels used: 1
  1017 ;; Hardware stack levels required when called: 4
  1018 ;; This function calls:
  1019 ;;		Nothing
  1020 ;; This function is called by:
  1021 ;;		_main
  1022 ;; This function uses a non-reentrant model
  1023 ;;
  1024                           
  1025     01B9                     ___awmod:	
  1026                           ;psect for function ___awmod
  1027                           
  1028     01B9                     l1065:	
  1029                           ;incstack = 0
  1030                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1031                           
  1032     01B9  1283               	bcf	3,5	;RP0=0, select bank0
  1033     01BA  1303               	bcf	3,6	;RP1=0, select bank0
  1034     01BB  01A9               	clrf	___awmod@sign
  1035     01BC                     l1067:
  1036     01BC  1FA7               	btfss	___awmod@dividend+1,7
  1037     01BD  29BF               	goto	u861
  1038     01BE  29C0               	goto	u860
  1039     01BF                     u861:
  1040     01BF  29C7               	goto	l1073
  1041     01C0                     u860:
  1042     01C0                     l1069:
  1043     01C0  09A6               	comf	___awmod@dividend,f
  1044     01C1  09A7               	comf	___awmod@dividend+1,f
  1045     01C2  0AA6               	incf	___awmod@dividend,f
  1046     01C3  1903               	skipnz
  1047     01C4  0AA7               	incf	___awmod@dividend+1,f
  1048     01C5                     l1071:
  1049     01C5  3001               	movlw	1
  1050     01C6  00A9               	movwf	___awmod@sign
  1051     01C7                     l1073:
  1052     01C7  1FA5               	btfss	___awmod@divisor+1,7
  1053     01C8  29CA               	goto	u871
  1054     01C9  29CB               	goto	u870
  1055     01CA                     u871:
  1056     01CA  29D0               	goto	l1077
  1057     01CB                     u870:
  1058     01CB                     l1075:
  1059     01CB  09A4               	comf	___awmod@divisor,f
  1060     01CC  09A5               	comf	___awmod@divisor+1,f
  1061     01CD  0AA4               	incf	___awmod@divisor,f
  1062     01CE  1903               	skipnz
  1063     01CF  0AA5               	incf	___awmod@divisor+1,f
  1064     01D0                     l1077:
  1065     01D0  0824               	movf	___awmod@divisor,w
  1066     01D1  0425               	iorwf	___awmod@divisor+1,w
  1067     01D2  1903               	btfsc	3,2
  1068     01D3  29D5               	goto	u881
  1069     01D4  29D6               	goto	u880
  1070     01D5                     u881:
  1071     01D5  2A03               	goto	l1095
  1072     01D6                     u880:
  1073     01D6                     l1079:
  1074     01D6  3001               	movlw	1
  1075     01D7  00A8               	movwf	___awmod@counter
  1076     01D8  29E2               	goto	l1085
  1077     01D9                     l1081:
  1078     01D9  3001               	movlw	1
  1079     01DA                     u895:
  1080     01DA  1003               	clrc
  1081     01DB  0DA4               	rlf	___awmod@divisor,f
  1082     01DC  0DA5               	rlf	___awmod@divisor+1,f
  1083     01DD  3EFF               	addlw	-1
  1084     01DE  1D03               	skipz
  1085     01DF  29DA               	goto	u895
  1086     01E0                     l1083:
  1087     01E0  3001               	movlw	1
  1088     01E1  07A8               	addwf	___awmod@counter,f
  1089     01E2                     l1085:
  1090     01E2  1FA5               	btfss	___awmod@divisor+1,7
  1091     01E3  29E5               	goto	u901
  1092     01E4  29E6               	goto	u900
  1093     01E5                     u901:
  1094     01E5  29D9               	goto	l1081
  1095     01E6                     u900:
  1096     01E6                     l1087:
  1097     01E6  0825               	movf	___awmod@divisor+1,w
  1098     01E7  0227               	subwf	___awmod@dividend+1,w
  1099     01E8  1D03               	skipz
  1100     01E9  29EC               	goto	u915
  1101     01EA  0824               	movf	___awmod@divisor,w
  1102     01EB  0226               	subwf	___awmod@dividend,w
  1103     01EC                     u915:
  1104     01EC  1C03               	skipc
  1105     01ED  29EF               	goto	u911
  1106     01EE  29F0               	goto	u910
  1107     01EF                     u911:
  1108     01EF  29F6               	goto	l1091
  1109     01F0                     u910:
  1110     01F0                     l1089:
  1111     01F0  0824               	movf	___awmod@divisor,w
  1112     01F1  02A6               	subwf	___awmod@dividend,f
  1113     01F2  0825               	movf	___awmod@divisor+1,w
  1114     01F3  1C03               	skipc
  1115     01F4  03A7               	decf	___awmod@dividend+1,f
  1116     01F5  02A7               	subwf	___awmod@dividend+1,f
  1117     01F6                     l1091:
  1118     01F6  3001               	movlw	1
  1119     01F7                     u925:
  1120     01F7  1003               	clrc
  1121     01F8  0CA5               	rrf	___awmod@divisor+1,f
  1122     01F9  0CA4               	rrf	___awmod@divisor,f
  1123     01FA  3EFF               	addlw	-1
  1124     01FB  1D03               	skipz
  1125     01FC  29F7               	goto	u925
  1126     01FD                     l1093:
  1127     01FD  3001               	movlw	1
  1128     01FE  02A8               	subwf	___awmod@counter,f
  1129     01FF  1D03               	btfss	3,2
  1130     0200  2A02               	goto	u931
  1131     0201  2A03               	goto	u930
  1132     0202                     u931:
  1133     0202  29E6               	goto	l1087
  1134     0203                     u930:
  1135     0203                     l1095:
  1136     0203  0829               	movf	___awmod@sign,w
  1137     0204  1903               	btfsc	3,2
  1138     0205  2A07               	goto	u941
  1139     0206  2A08               	goto	u940
  1140     0207                     u941:
  1141     0207  2A0D               	goto	l1099
  1142     0208                     u940:
  1143     0208                     l1097:
  1144     0208  09A6               	comf	___awmod@dividend,f
  1145     0209  09A7               	comf	___awmod@dividend+1,f
  1146     020A  0AA6               	incf	___awmod@dividend,f
  1147     020B  1903               	skipnz
  1148     020C  0AA7               	incf	___awmod@dividend+1,f
  1149     020D                     l1099:
  1150     020D  0827               	movf	___awmod@dividend+1,w
  1151     020E  00A5               	movwf	?___awmod+1
  1152     020F  0826               	movf	___awmod@dividend,w
  1153     0210  00A4               	movwf	?___awmod
  1154     0211                     l343:
  1155     0211  0008               	return
  1156     0212                     __end_of___awmod:
  1157                           
  1158                           	psect	text7
  1159     008E                     __ptext7:	
  1160 ;; *************** function ___awdiv *****************
  1161 ;; Defined at:
  1162 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awdiv.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;  divisor         2    4[BANK0 ] int 
  1165 ;;  dividend        2    6[BANK0 ] int 
  1166 ;; Auto vars:     Size  Location     Type
  1167 ;;  quotient        2   10[BANK0 ] int 
  1168 ;;  sign            1    9[BANK0 ] unsigned char 
  1169 ;;  counter         1    8[BANK0 ] unsigned char 
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  2    4[BANK0 ] int 
  1172 ;; Registers used:
  1173 ;;		wreg, status,2, status,0
  1174 ;; Tracked objects:
  1175 ;;		On entry : 0/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1179 ;;      Params:         0       4       0       0       0
  1180 ;;      Locals:         0       4       0       0       0
  1181 ;;      Temps:          0       0       0       0       0
  1182 ;;      Totals:         0       8       0       0       0
  1183 ;;Total ram usage:        8 bytes
  1184 ;; Hardware stack levels used: 1
  1185 ;; Hardware stack levels required when called: 4
  1186 ;; This function calls:
  1187 ;;		Nothing
  1188 ;; This function is called by:
  1189 ;;		_main
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193     008E                     ___awdiv:	
  1194                           ;psect for function ___awdiv
  1195                           
  1196     008E                     l1021:	
  1197                           ;incstack = 0
  1198                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1199                           
  1200     008E  1283               	bcf	3,5	;RP0=0, select bank0
  1201     008F  1303               	bcf	3,6	;RP1=0, select bank0
  1202     0090  01A9               	clrf	___awdiv@sign
  1203     0091                     l1023:
  1204     0091  1FA5               	btfss	___awdiv@divisor+1,7
  1205     0092  2894               	goto	u761
  1206     0093  2895               	goto	u760
  1207     0094                     u761:
  1208     0094  289C               	goto	l1029
  1209     0095                     u760:
  1210     0095                     l1025:
  1211     0095  09A4               	comf	___awdiv@divisor,f
  1212     0096  09A5               	comf	___awdiv@divisor+1,f
  1213     0097  0AA4               	incf	___awdiv@divisor,f
  1214     0098  1903               	skipnz
  1215     0099  0AA5               	incf	___awdiv@divisor+1,f
  1216     009A                     l1027:
  1217     009A  3001               	movlw	1
  1218     009B  00A9               	movwf	___awdiv@sign
  1219     009C                     l1029:
  1220     009C  1FA7               	btfss	___awdiv@dividend+1,7
  1221     009D  289F               	goto	u771
  1222     009E  28A0               	goto	u770
  1223     009F                     u771:
  1224     009F  28A7               	goto	l1035
  1225     00A0                     u770:
  1226     00A0                     l1031:
  1227     00A0  09A6               	comf	___awdiv@dividend,f
  1228     00A1  09A7               	comf	___awdiv@dividend+1,f
  1229     00A2  0AA6               	incf	___awdiv@dividend,f
  1230     00A3  1903               	skipnz
  1231     00A4  0AA7               	incf	___awdiv@dividend+1,f
  1232     00A5                     l1033:
  1233     00A5  3001               	movlw	1
  1234     00A6  06A9               	xorwf	___awdiv@sign,f
  1235     00A7                     l1035:
  1236     00A7  01AA               	clrf	___awdiv@quotient
  1237     00A8  01AB               	clrf	___awdiv@quotient+1
  1238     00A9                     l1037:
  1239     00A9  0824               	movf	___awdiv@divisor,w
  1240     00AA  0425               	iorwf	___awdiv@divisor+1,w
  1241     00AB  1903               	btfsc	3,2
  1242     00AC  28AE               	goto	u781
  1243     00AD  28AF               	goto	u780
  1244     00AE                     u781:
  1245     00AE  28E4               	goto	l1057
  1246     00AF                     u780:
  1247     00AF                     l1039:
  1248     00AF  3001               	movlw	1
  1249     00B0  00A8               	movwf	___awdiv@counter
  1250     00B1  28BB               	goto	l1045
  1251     00B2                     l1041:
  1252     00B2  3001               	movlw	1
  1253     00B3                     u795:
  1254     00B3  1003               	clrc
  1255     00B4  0DA4               	rlf	___awdiv@divisor,f
  1256     00B5  0DA5               	rlf	___awdiv@divisor+1,f
  1257     00B6  3EFF               	addlw	-1
  1258     00B7  1D03               	skipz
  1259     00B8  28B3               	goto	u795
  1260     00B9                     l1043:
  1261     00B9  3001               	movlw	1
  1262     00BA  07A8               	addwf	___awdiv@counter,f
  1263     00BB                     l1045:
  1264     00BB  1FA5               	btfss	___awdiv@divisor+1,7
  1265     00BC  28BE               	goto	u801
  1266     00BD  28BF               	goto	u800
  1267     00BE                     u801:
  1268     00BE  28B2               	goto	l1041
  1269     00BF                     u800:
  1270     00BF                     l1047:
  1271     00BF  3001               	movlw	1
  1272     00C0                     u815:
  1273     00C0  1003               	clrc
  1274     00C1  0DAA               	rlf	___awdiv@quotient,f
  1275     00C2  0DAB               	rlf	___awdiv@quotient+1,f
  1276     00C3  3EFF               	addlw	-1
  1277     00C4  1D03               	skipz
  1278     00C5  28C0               	goto	u815
  1279     00C6  0825               	movf	___awdiv@divisor+1,w
  1280     00C7  0227               	subwf	___awdiv@dividend+1,w
  1281     00C8  1D03               	skipz
  1282     00C9  28CC               	goto	u825
  1283     00CA  0824               	movf	___awdiv@divisor,w
  1284     00CB  0226               	subwf	___awdiv@dividend,w
  1285     00CC                     u825:
  1286     00CC  1C03               	skipc
  1287     00CD  28CF               	goto	u821
  1288     00CE  28D0               	goto	u820
  1289     00CF                     u821:
  1290     00CF  28D7               	goto	l1053
  1291     00D0                     u820:
  1292     00D0                     l1049:
  1293     00D0  0824               	movf	___awdiv@divisor,w
  1294     00D1  02A6               	subwf	___awdiv@dividend,f
  1295     00D2  0825               	movf	___awdiv@divisor+1,w
  1296     00D3  1C03               	skipc
  1297     00D4  03A7               	decf	___awdiv@dividend+1,f
  1298     00D5  02A7               	subwf	___awdiv@dividend+1,f
  1299     00D6                     l1051:
  1300     00D6  142A               	bsf	___awdiv@quotient,0
  1301     00D7                     l1053:
  1302     00D7  3001               	movlw	1
  1303     00D8                     u835:
  1304     00D8  1003               	clrc
  1305     00D9  0CA5               	rrf	___awdiv@divisor+1,f
  1306     00DA  0CA4               	rrf	___awdiv@divisor,f
  1307     00DB  3EFF               	addlw	-1
  1308     00DC  1D03               	skipz
  1309     00DD  28D8               	goto	u835
  1310     00DE                     l1055:
  1311     00DE  3001               	movlw	1
  1312     00DF  02A8               	subwf	___awdiv@counter,f
  1313     00E0  1D03               	btfss	3,2
  1314     00E1  28E3               	goto	u841
  1315     00E2  28E4               	goto	u840
  1316     00E3                     u841:
  1317     00E3  28BF               	goto	l1047
  1318     00E4                     u840:
  1319     00E4                     l1057:
  1320     00E4  0829               	movf	___awdiv@sign,w
  1321     00E5  1903               	btfsc	3,2
  1322     00E6  28E8               	goto	u851
  1323     00E7  28E9               	goto	u850
  1324     00E8                     u851:
  1325     00E8  28EE               	goto	l1061
  1326     00E9                     u850:
  1327     00E9                     l1059:
  1328     00E9  09AA               	comf	___awdiv@quotient,f
  1329     00EA  09AB               	comf	___awdiv@quotient+1,f
  1330     00EB  0AAA               	incf	___awdiv@quotient,f
  1331     00EC  1903               	skipnz
  1332     00ED  0AAB               	incf	___awdiv@quotient+1,f
  1333     00EE                     l1061:
  1334     00EE  082B               	movf	___awdiv@quotient+1,w
  1335     00EF  00A5               	movwf	?___awdiv+1
  1336     00F0  082A               	movf	___awdiv@quotient,w
  1337     00F1  00A4               	movwf	?___awdiv
  1338     00F2                     l330:
  1339     00F2  0008               	return
  1340     00F3                     __end_of___awdiv:
  1341                           
  1342                           	psect	text8
  1343     02B6                     __ptext8:	
  1344 ;; *************** function _ISR *****************
  1345 ;; Defined at:
  1346 ;;		line 80 in file "main.c"
  1347 ;; Parameters:    Size  Location     Type
  1348 ;;		None
  1349 ;; Auto vars:     Size  Location     Type
  1350 ;;		None
  1351 ;; Return value:  Size  Location     Type
  1352 ;;                  1    wreg      void 
  1353 ;; Registers used:
  1354 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1355 ;; Tracked objects:
  1356 ;;		On entry : 0/0
  1357 ;;		On exit  : 0/0
  1358 ;;		Unchanged: 0/0
  1359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1360 ;;      Params:         0       0       0       0       0
  1361 ;;      Locals:         0       0       0       0       0
  1362 ;;      Temps:          0       4       0       0       0
  1363 ;;      Totals:         0       4       0       0       0
  1364 ;;Total ram usage:        4 bytes
  1365 ;; Hardware stack levels used: 1
  1366 ;; Hardware stack levels required when called: 3
  1367 ;; This function calls:
  1368 ;;		_buttonISR
  1369 ;; This function is called by:
  1370 ;;		Interrupt level 1
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373                           
  1374     02B6                     _ISR:	
  1375                           ;psect for function _ISR
  1376                           
  1377     02B6                     i1l1121:
  1378                           
  1379                           ;main.c: 81:     if (TMR1IF) {
  1380     02B6  1C0C               	btfss	12,0	;volatile
  1381     02B7  2AB9               	goto	u96_21
  1382     02B8  2ABA               	goto	u96_20
  1383     02B9                     u96_21:
  1384     02B9  2AD0               	goto	i1l1133
  1385     02BA                     u96_20:
  1386     02BA                     i1l1123:
  1387                           
  1388                           ;main.c: 82:         TMR1IF = 0;
  1389     02BA  100C               	bcf	12,0	;volatile
  1390     02BB                     i1l1125:
  1391                           
  1392                           ;main.c: 83:         overflowCount++;
  1393     02BB  3001               	movlw	1
  1394     02BC  07B0               	addwf	_overflowCount,f	;volatile
  1395     02BD  1803               	skipnc
  1396     02BE  0AB1               	incf	_overflowCount+1,f	;volatile
  1397     02BF  3000               	movlw	0
  1398     02C0  07B1               	addwf	_overflowCount+1,f	;volatile
  1399     02C1                     i1l1127:
  1400                           
  1401                           ;main.c: 84:         if (overflowCount == 9) {
  1402     02C1  3009               	movlw	9
  1403     02C2  0630               	xorwf	_overflowCount,w	;volatile
  1404     02C3  0431               	iorwf	_overflowCount+1,w	;volatile
  1405     02C4  1D03               	btfss	3,2
  1406     02C5  2AC7               	goto	u97_21
  1407     02C6  2AC8               	goto	u97_20
  1408     02C7                     u97_21:
  1409     02C7  2AD0               	goto	i1l1133
  1410     02C8                     u97_20:
  1411     02C8                     i1l1129:
  1412                           
  1413                           ;main.c: 85:             overflowCount = 0;
  1414     02C8  01B0               	clrf	_overflowCount	;volatile
  1415     02C9  01B1               	clrf	_overflowCount+1	;volatile
  1416     02CA                     i1l1131:
  1417                           
  1418                           ;main.c: 86:             seconds++;
  1419     02CA  3001               	movlw	1
  1420     02CB  07AE               	addwf	_seconds,f	;volatile
  1421     02CC  1803               	skipnc
  1422     02CD  0AAF               	incf	_seconds+1,f	;volatile
  1423     02CE  3000               	movlw	0
  1424     02CF  07AF               	addwf	_seconds+1,f	;volatile
  1425     02D0                     i1l1133:
  1426                           
  1427                           ;main.c: 90:     if (INTCONbits.INTF) {
  1428     02D0  1C8B               	btfss	11,1	;volatile
  1429     02D1  2AD3               	goto	u98_21
  1430     02D2  2AD4               	goto	u98_20
  1431     02D3                     u98_21:
  1432     02D3  2ADA               	goto	i1l86
  1433     02D4                     u98_20:
  1434     02D4                     i1l1135:
  1435                           
  1436                           ;main.c: 91:         buttonISR();
  1437     02D4  120A  118A  20F3  120A  118A  	fcall	_buttonISR
  1438     02D9                     i1l1137:
  1439                           
  1440                           ;main.c: 92:         INTCONbits.INTF = 0;
  1441     02D9  108B               	bcf	11,1	;volatile
  1442     02DA                     i1l86:
  1443     02DA  1283               	bcf	3,5	;RP0=0, select bank0
  1444     02DB  1303               	bcf	3,6	;RP1=0, select bank0
  1445     02DC  0823               	movf	??_ISR+3,w
  1446     02DD  00FF               	movwf	btemp+1
  1447     02DE  0822               	movf	??_ISR+2,w
  1448     02DF  008A               	movwf	10
  1449     02E0  0821               	movf	??_ISR+1,w
  1450     02E1  0084               	movwf	4
  1451     02E2  0E20               	swapf	??_ISR,w
  1452     02E3  0083               	movwf	3
  1453     02E4  0EFE               	swapf	btemp,f
  1454     02E5  0E7E               	swapf	btemp,w
  1455     02E6  0009               	retfie
  1456     02E7                     __end_of_ISR:
  1457                           
  1458                           	psect	intentry
  1459     0004                     __pintentry:	
  1460                           ;incstack = 0
  1461                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1462                           
  1463     0004                     interrupt_function:
  1464     007E                     saved_w         set	btemp
  1465     0004  00FE               	movwf	btemp
  1466     0005  0E03               	swapf	3,w
  1467     0006  1283               	bcf	3,5	;RP0=0, select bank0
  1468     0007  1303               	bcf	3,6	;RP1=0, select bank0
  1469     0008  00A0               	movwf	??_ISR
  1470     0009  0804               	movf	4,w
  1471     000A  00A1               	movwf	??_ISR+1
  1472     000B  080A               	movf	10,w
  1473     000C  00A2               	movwf	??_ISR+2
  1474     000D  087F               	movf	btemp+1,w
  1475     000E  00A3               	movwf	??_ISR+3
  1476     000F  120A  118A  2AB6   	ljmp	_ISR
  1477                           
  1478                           	psect	text9
  1479     00F3                     __ptext9:	
  1480 ;; *************** function _buttonISR *****************
  1481 ;; Defined at:
  1482 ;;		line 96 in file "main.c"
  1483 ;; Parameters:    Size  Location     Type
  1484 ;;		None
  1485 ;; Auto vars:     Size  Location     Type
  1486 ;;  currentButto    1   11[COMMON] unsigned char 
  1487 ;; Return value:  Size  Location     Type
  1488 ;;                  1    wreg      void 
  1489 ;; Registers used:
  1490 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1491 ;; Tracked objects:
  1492 ;;		On entry : 0/0
  1493 ;;		On exit  : 0/0
  1494 ;;		Unchanged: 0/0
  1495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1496 ;;      Params:         0       0       0       0       0
  1497 ;;      Locals:         1       0       0       0       0
  1498 ;;      Temps:          3       0       0       0       0
  1499 ;;      Totals:         4       0       0       0       0
  1500 ;;Total ram usage:        4 bytes
  1501 ;; Hardware stack levels used: 1
  1502 ;; Hardware stack levels required when called: 2
  1503 ;; This function calls:
  1504 ;;		i1___awdiv
  1505 ;;		i1___awmod
  1506 ;;		i1_tx
  1507 ;;		i1_txstr
  1508 ;; This function is called by:
  1509 ;;		_ISR
  1510 ;; This function uses a non-reentrant model
  1511 ;;
  1512                           
  1513     00F3                     _buttonISR:	
  1514                           ;psect for function _buttonISR
  1515                           
  1516     00F3                     i1l999:	
  1517                           ;incstack = 0
  1518                           ; Regs used in _buttonISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1519                           
  1520                           
  1521                           ;main.c: 97:     unsigned char currentButtonState = RB0;
  1522     00F3  3000               	movlw	0
  1523     00F4  1283               	bcf	3,5	;RP0=0, select bank0
  1524     00F5  1303               	bcf	3,6	;RP1=0, select bank0
  1525     00F6  1806               	btfsc	6,0	;volatile
  1526     00F7  3001               	movlw	1
  1527     00F8  00FB               	movwf	buttonISR@currentButtonState
  1528     00F9                     i1l1001:
  1529                           
  1530                           ;main.c: 98:     if (prevButtonState == 1 && currentButtonState == 0) {
  1531     00F9  037D               	decf	_prevButtonState,w
  1532     00FA  1D03               	btfss	3,2
  1533     00FB  28FD               	goto	u73_21
  1534     00FC  28FE               	goto	u73_20
  1535     00FD                     u73_21:
  1536     00FD  2953               	goto	i1l1019
  1537     00FE                     u73_20:
  1538     00FE                     i1l1003:
  1539     00FE  087B               	movf	buttonISR@currentButtonState,w
  1540     00FF  1D03               	btfss	3,2
  1541     0100  2902               	goto	u74_21
  1542     0101  2903               	goto	u74_20
  1543     0102                     u74_21:
  1544     0102  2953               	goto	i1l1019
  1545     0103                     u74_20:
  1546     0103                     i1l1005:
  1547                           
  1548                           ;main.c: 99:         _delay((unsigned long)((50)*(20000000/4000.0)));
  1549     0103  3002               	movlw	2
  1550     0104  00FA               	movwf	??_buttonISR+2
  1551     0105  3045               	movlw	69
  1552     0106  00F9               	movwf	??_buttonISR+1
  1553     0107  30A9               	movlw	169
  1554     0108  00F8               	movwf	??_buttonISR
  1555     0109                     u99_27:
  1556     0109  0BF8               	decfsz	??_buttonISR,f
  1557     010A  2909               	goto	u99_27
  1558     010B  0BF9               	decfsz	??_buttonISR+1,f
  1559     010C  2909               	goto	u99_27
  1560     010D  0BFA               	decfsz	??_buttonISR+2,f
  1561     010E  2909               	goto	u99_27
  1562     010F  2910               	nop2
  1563     0110                     i1l1007:
  1564                           
  1565                           ;main.c: 100:         if (RB0 == 0) {
  1566     0110  1283               	bcf	3,5	;RP0=0, select bank0
  1567     0111  1303               	bcf	3,6	;RP1=0, select bank0
  1568     0112  1806               	btfsc	6,0	;volatile
  1569     0113  2915               	goto	u75_21
  1570     0114  2916               	goto	u75_20
  1571     0115                     u75_21:
  1572     0115  2953               	goto	i1l1019
  1573     0116                     u75_20:
  1574     0116                     i1l1009:
  1575                           
  1576                           ;main.c: 101:             buttonPresses++;
  1577     0116  3001               	movlw	1
  1578     0117  07FC               	addwf	_buttonPresses,f	;volatile
  1579     0118                     i1l1011:
  1580                           
  1581                           ;main.c: 102:             txstr("Button Press Detected. Count: ");
  1582     0118  3029               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1583     0119  00F1               	movwf	i1txstr@a
  1584     011A  120A  118A  2307  120A  118A  	fcall	i1_txstr
  1585     011F                     i1l1013:
  1586                           
  1587                           ;main.c: 103:             tx((buttonPresses / 10) + '0');
  1588     011F  300A               	movlw	10
  1589     0120  00F0               	movwf	i1___awdiv@divisor
  1590     0121  3000               	movlw	0
  1591     0122  00F1               	movwf	i1___awdiv@divisor+1
  1592     0123  087C               	movf	_buttonPresses,w	;volatile
  1593     0124  00F8               	movwf	??_buttonISR
  1594     0125  01F9               	clrf	??_buttonISR+1
  1595     0126  0878               	movf	??_buttonISR,w
  1596     0127  00F2               	movwf	i1___awdiv@dividend
  1597     0128  0879               	movf	??_buttonISR+1,w
  1598     0129  00F3               	movwf	i1___awdiv@dividend+1
  1599     012A  120A  118A  2156  120A  118A  	fcall	i1___awdiv
  1600     012F  0870               	movf	?i1___awdiv,w
  1601     0130  3E30               	addlw	48
  1602     0131  120A  118A  2344  120A  118A  	fcall	i1_tx
  1603     0136                     i1l1015:
  1604                           
  1605                           ;main.c: 104:             tx((buttonPresses % 10) + '0');
  1606     0136  300A               	movlw	10
  1607     0137  00F0               	movwf	i1___awmod@divisor
  1608     0138  3000               	movlw	0
  1609     0139  00F1               	movwf	i1___awmod@divisor+1
  1610     013A  087C               	movf	_buttonPresses,w	;volatile
  1611     013B  00F8               	movwf	??_buttonISR
  1612     013C  01F9               	clrf	??_buttonISR+1
  1613     013D  0878               	movf	??_buttonISR,w
  1614     013E  00F2               	movwf	i1___awmod@dividend
  1615     013F  0879               	movf	??_buttonISR+1,w
  1616     0140  00F3               	movwf	i1___awmod@dividend+1
  1617     0141  120A  118A  2212  120A  118A  	fcall	i1___awmod
  1618     0146  0870               	movf	?i1___awmod,w
  1619     0147  3E30               	addlw	48
  1620     0148  120A  118A  2344  120A  118A  	fcall	i1_tx
  1621     014D                     i1l1017:
  1622                           
  1623                           ;main.c: 105:             tx('\n');
  1624     014D  300A               	movlw	10
  1625     014E  120A  118A  2344  120A  118A  	fcall	i1_tx
  1626     0153                     i1l1019:
  1627                           
  1628                           ;main.c: 108:     prevButtonState = currentButtonState;
  1629     0153  087B               	movf	buttonISR@currentButtonState,w
  1630     0154  00FD               	movwf	_prevButtonState
  1631     0155                     i1l91:
  1632     0155  0008               	return
  1633     0156                     __end_of_buttonISR:
  1634                           
  1635                           	psect	text10
  1636     0307                     __ptext10:	
  1637 ;; *************** function i1_txstr *****************
  1638 ;; Defined at:
  1639 ;;		line 59 in file "main.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;  a               1    1[COMMON] PTR const unsigned char 
  1642 ;;		 -> STR_2(31), STR_1(40), 
  1643 ;; Auto vars:     Size  Location     Type
  1644 ;;		None
  1645 ;; Return value:  Size  Location     Type
  1646 ;;                  1    wreg      void 
  1647 ;; Registers used:
  1648 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1649 ;; Tracked objects:
  1650 ;;		On entry : 0/0
  1651 ;;		On exit  : 0/0
  1652 ;;		Unchanged: 0/0
  1653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1654 ;;      Params:         1       0       0       0       0
  1655 ;;      Locals:         0       0       0       0       0
  1656 ;;      Temps:          0       0       0       0       0
  1657 ;;      Totals:         1       0       0       0       0
  1658 ;;Total ram usage:        1 bytes
  1659 ;; Hardware stack levels used: 1
  1660 ;; Hardware stack levels required when called: 1
  1661 ;; This function calls:
  1662 ;;		i1_tx
  1663 ;; This function is called by:
  1664 ;;		_buttonISR
  1665 ;; This function uses a non-reentrant model
  1666 ;;
  1667                           
  1668     0307                     i1_txstr:	
  1669                           ;psect for function i1_txstr
  1670                           
  1671     0307                     i1l895:	
  1672                           ;incstack = 0
  1673                           ; Regs used in i1_txstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1674                           
  1675                           
  1676                           ;main.c: 60:     while (*a) {
  1677     0307  2B16               	goto	i1l901
  1678     0308                     i1l897:
  1679                           
  1680                           ;main.c: 61:         tx(*a++);
  1681     0308  0871               	movf	i1txstr@a,w
  1682     0309  0084               	movwf	4
  1683     030A  120A  118A  2269  120A  118A  	fcall	stringdir
  1684     030F  120A  118A  2344  120A  118A  	fcall	i1_tx
  1685     0314                     i1l899:
  1686     0314  3001               	movlw	1
  1687     0315  07F1               	addwf	i1txstr@a,f
  1688     0316                     i1l901:
  1689                           
  1690                           ;main.c: 60:     while (*a) {
  1691     0316  0871               	movf	i1txstr@a,w
  1692     0317  0084               	movwf	4
  1693     0318  120A  118A  2269  120A  118A  	fcall	stringdir
  1694     031D  3A00               	xorlw	0
  1695     031E  1D03               	skipz
  1696     031F  2B21               	goto	u52_21
  1697     0320  2B22               	goto	u52_20
  1698     0321                     u52_21:
  1699     0321  2B08               	goto	i1l897
  1700     0322                     u52_20:
  1701     0322                     i1l72:
  1702     0322  0008               	return
  1703     0323                     __end_ofi1_txstr:
  1704                           
  1705                           	psect	text11
  1706     0344                     __ptext11:	
  1707 ;; *************** function i1_tx *****************
  1708 ;; Defined at:
  1709 ;;		line 54 in file "main.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;  a               1    wreg     unsigned char 
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;  a               1    0[COMMON] unsigned char 
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  1    wreg      void 
  1716 ;; Registers used:
  1717 ;;		wreg
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1723 ;;      Params:         0       0       0       0       0
  1724 ;;      Locals:         1       0       0       0       0
  1725 ;;      Temps:          0       0       0       0       0
  1726 ;;      Totals:         1       0       0       0       0
  1727 ;;Total ram usage:        1 bytes
  1728 ;; Hardware stack levels used: 1
  1729 ;; This function calls:
  1730 ;;		Nothing
  1731 ;; This function is called by:
  1732 ;;		_buttonISR
  1733 ;;		i1_txstr
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737     0344                     i1_tx:	
  1738                           ;psect for function i1_tx
  1739                           
  1740                           
  1741                           ;incstack = 0
  1742                           ; Regs used in i1_tx: [wreg]
  1743                           ;i1tx@a stored from wreg
  1744     0344  00F0               	movwf	i1tx@a
  1745     0345                     i1l887:
  1746     0345                     i1l63:	
  1747                           ;main.c: 55:     while (!TXIF);
  1748                           
  1749     0345  1283               	bcf	3,5	;RP0=0, select bank0
  1750     0346  1303               	bcf	3,6	;RP1=0, select bank0
  1751     0347  1E0C               	btfss	12,4	;volatile
  1752     0348  2B4A               	goto	u50_21
  1753     0349  2B4B               	goto	u50_20
  1754     034A                     u50_21:
  1755     034A  2B45               	goto	i1l63
  1756     034B                     u50_20:
  1757     034B                     i1l889:
  1758                           
  1759                           ;main.c: 56:     TXREG = a;
  1760     034B  0870               	movf	i1tx@a,w
  1761     034C  0099               	movwf	25	;volatile
  1762     034D                     i1l66:
  1763     034D  0008               	return
  1764     034E                     __end_ofi1_tx:
  1765                           
  1766                           	psect	text12
  1767     0212                     __ptext12:	
  1768 ;; *************** function i1___awmod *****************
  1769 ;; Defined at:
  1770 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
  1771 ;; Parameters:    Size  Location     Type
  1772 ;;  divisor         2    0[COMMON] int 
  1773 ;;  dividend        2    2[COMMON] int 
  1774 ;; Auto vars:     Size  Location     Type
  1775 ;;  sign            1    5[COMMON] unsigned char 
  1776 ;;  counter         1    4[COMMON] unsigned char 
  1777 ;; Return value:  Size  Location     Type
  1778 ;;                  2    0[COMMON] int 
  1779 ;; Registers used:
  1780 ;;		wreg, status,2, status,0
  1781 ;; Tracked objects:
  1782 ;;		On entry : 0/0
  1783 ;;		On exit  : 0/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1786 ;;      Params:         4       0       0       0       0
  1787 ;;      Locals:         2       0       0       0       0
  1788 ;;      Temps:          0       0       0       0       0
  1789 ;;      Totals:         6       0       0       0       0
  1790 ;;Total ram usage:        6 bytes
  1791 ;; Hardware stack levels used: 1
  1792 ;; This function calls:
  1793 ;;		Nothing
  1794 ;; This function is called by:
  1795 ;;		_buttonISR
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798                           
  1799     0212                     i1___awmod:	
  1800                           ;psect for function i1___awmod
  1801                           
  1802     0212                     i1l947:	
  1803                           ;incstack = 0
  1804                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
  1805                           
  1806     0212  01F5               	clrf	i1___awmod@sign
  1807     0213                     i1l949:
  1808     0213  1FF3               	btfss	i1___awmod@dividend+1,7
  1809     0214  2A16               	goto	u63_21
  1810     0215  2A17               	goto	u63_20
  1811     0216                     u63_21:
  1812     0216  2A1E               	goto	i1l955
  1813     0217                     u63_20:
  1814     0217                     i1l951:
  1815     0217  09F2               	comf	i1___awmod@dividend,f
  1816     0218  09F3               	comf	i1___awmod@dividend+1,f
  1817     0219  0AF2               	incf	i1___awmod@dividend,f
  1818     021A  1903               	skipnz
  1819     021B  0AF3               	incf	i1___awmod@dividend+1,f
  1820     021C                     i1l953:
  1821     021C  3001               	movlw	1
  1822     021D  00F5               	movwf	i1___awmod@sign
  1823     021E                     i1l955:
  1824     021E  1FF1               	btfss	i1___awmod@divisor+1,7
  1825     021F  2A21               	goto	u64_21
  1826     0220  2A22               	goto	u64_20
  1827     0221                     u64_21:
  1828     0221  2A27               	goto	i1l959
  1829     0222                     u64_20:
  1830     0222                     i1l957:
  1831     0222  09F0               	comf	i1___awmod@divisor,f
  1832     0223  09F1               	comf	i1___awmod@divisor+1,f
  1833     0224  0AF0               	incf	i1___awmod@divisor,f
  1834     0225  1903               	skipnz
  1835     0226  0AF1               	incf	i1___awmod@divisor+1,f
  1836     0227                     i1l959:
  1837     0227  0870               	movf	i1___awmod@divisor,w
  1838     0228  0471               	iorwf	i1___awmod@divisor+1,w
  1839     0229  1903               	btfsc	3,2
  1840     022A  2A2C               	goto	u65_21
  1841     022B  2A2D               	goto	u65_20
  1842     022C                     u65_21:
  1843     022C  2A5A               	goto	i1l977
  1844     022D                     u65_20:
  1845     022D                     i1l961:
  1846     022D  3001               	movlw	1
  1847     022E  00F4               	movwf	i1___awmod@counter
  1848     022F  2A39               	goto	i1l967
  1849     0230                     i1l963:
  1850     0230  3001               	movlw	1
  1851     0231                     u66_25:
  1852     0231  1003               	clrc
  1853     0232  0DF0               	rlf	i1___awmod@divisor,f
  1854     0233  0DF1               	rlf	i1___awmod@divisor+1,f
  1855     0234  3EFF               	addlw	-1
  1856     0235  1D03               	skipz
  1857     0236  2A31               	goto	u66_25
  1858     0237                     i1l965:
  1859     0237  3001               	movlw	1
  1860     0238  07F4               	addwf	i1___awmod@counter,f
  1861     0239                     i1l967:
  1862     0239  1FF1               	btfss	i1___awmod@divisor+1,7
  1863     023A  2A3C               	goto	u67_21
  1864     023B  2A3D               	goto	u67_20
  1865     023C                     u67_21:
  1866     023C  2A30               	goto	i1l963
  1867     023D                     u67_20:
  1868     023D                     i1l969:
  1869     023D  0871               	movf	i1___awmod@divisor+1,w
  1870     023E  0273               	subwf	i1___awmod@dividend+1,w
  1871     023F  1D03               	skipz
  1872     0240  2A43               	goto	u68_25
  1873     0241  0870               	movf	i1___awmod@divisor,w
  1874     0242  0272               	subwf	i1___awmod@dividend,w
  1875     0243                     u68_25:
  1876     0243  1C03               	skipc
  1877     0244  2A46               	goto	u68_21
  1878     0245  2A47               	goto	u68_20
  1879     0246                     u68_21:
  1880     0246  2A4D               	goto	i1l973
  1881     0247                     u68_20:
  1882     0247                     i1l971:
  1883     0247  0870               	movf	i1___awmod@divisor,w
  1884     0248  02F2               	subwf	i1___awmod@dividend,f
  1885     0249  0871               	movf	i1___awmod@divisor+1,w
  1886     024A  1C03               	skipc
  1887     024B  03F3               	decf	i1___awmod@dividend+1,f
  1888     024C  02F3               	subwf	i1___awmod@dividend+1,f
  1889     024D                     i1l973:
  1890     024D  3001               	movlw	1
  1891     024E                     u69_25:
  1892     024E  1003               	clrc
  1893     024F  0CF1               	rrf	i1___awmod@divisor+1,f
  1894     0250  0CF0               	rrf	i1___awmod@divisor,f
  1895     0251  3EFF               	addlw	-1
  1896     0252  1D03               	skipz
  1897     0253  2A4E               	goto	u69_25
  1898     0254                     i1l975:
  1899     0254  3001               	movlw	1
  1900     0255  02F4               	subwf	i1___awmod@counter,f
  1901     0256  1D03               	btfss	3,2
  1902     0257  2A59               	goto	u70_21
  1903     0258  2A5A               	goto	u70_20
  1904     0259                     u70_21:
  1905     0259  2A3D               	goto	i1l969
  1906     025A                     u70_20:
  1907     025A                     i1l977:
  1908     025A  0875               	movf	i1___awmod@sign,w
  1909     025B  1903               	btfsc	3,2
  1910     025C  2A5E               	goto	u71_21
  1911     025D  2A5F               	goto	u71_20
  1912     025E                     u71_21:
  1913     025E  2A64               	goto	i1l981
  1914     025F                     u71_20:
  1915     025F                     i1l979:
  1916     025F  09F2               	comf	i1___awmod@dividend,f
  1917     0260  09F3               	comf	i1___awmod@dividend+1,f
  1918     0261  0AF2               	incf	i1___awmod@dividend,f
  1919     0262  1903               	skipnz
  1920     0263  0AF3               	incf	i1___awmod@dividend+1,f
  1921     0264                     i1l981:
  1922     0264  0873               	movf	i1___awmod@dividend+1,w
  1923     0265  00F1               	movwf	?i1___awmod+1
  1924     0266  0872               	movf	i1___awmod@dividend,w
  1925     0267  00F0               	movwf	?i1___awmod
  1926     0268                     i1l343:
  1927     0268  0008               	return
  1928     0269                     __end_ofi1___awmod:
  1929                           
  1930                           	psect	text13
  1931     0156                     __ptext13:	
  1932 ;; *************** function i1___awdiv *****************
  1933 ;; Defined at:
  1934 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awdiv.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;  divisor         2    0[COMMON] int 
  1937 ;;  dividend        2    2[COMMON] int 
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;  quotient        2    6[COMMON] int 
  1940 ;;  sign            1    5[COMMON] unsigned char 
  1941 ;;  counter         1    4[COMMON] unsigned char 
  1942 ;; Return value:  Size  Location     Type
  1943 ;;                  2    0[COMMON] int 
  1944 ;; Registers used:
  1945 ;;		wreg, status,2, status,0
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1951 ;;      Params:         4       0       0       0       0
  1952 ;;      Locals:         4       0       0       0       0
  1953 ;;      Temps:          0       0       0       0       0
  1954 ;;      Totals:         8       0       0       0       0
  1955 ;;Total ram usage:        8 bytes
  1956 ;; Hardware stack levels used: 1
  1957 ;; This function calls:
  1958 ;;		Nothing
  1959 ;; This function is called by:
  1960 ;;		_buttonISR
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964     0156                     i1___awdiv:	
  1965                           ;psect for function i1___awdiv
  1966                           
  1967     0156                     i1l903:	
  1968                           ;incstack = 0
  1969                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
  1970                           
  1971     0156  01F5               	clrf	i1___awdiv@sign
  1972     0157                     i1l905:
  1973     0157  1FF1               	btfss	i1___awdiv@divisor+1,7
  1974     0158  295A               	goto	u53_21
  1975     0159  295B               	goto	u53_20
  1976     015A                     u53_21:
  1977     015A  2962               	goto	i1l911
  1978     015B                     u53_20:
  1979     015B                     i1l907:
  1980     015B  09F0               	comf	i1___awdiv@divisor,f
  1981     015C  09F1               	comf	i1___awdiv@divisor+1,f
  1982     015D  0AF0               	incf	i1___awdiv@divisor,f
  1983     015E  1903               	skipnz
  1984     015F  0AF1               	incf	i1___awdiv@divisor+1,f
  1985     0160                     i1l909:
  1986     0160  3001               	movlw	1
  1987     0161  00F5               	movwf	i1___awdiv@sign
  1988     0162                     i1l911:
  1989     0162  1FF3               	btfss	i1___awdiv@dividend+1,7
  1990     0163  2965               	goto	u54_21
  1991     0164  2966               	goto	u54_20
  1992     0165                     u54_21:
  1993     0165  296D               	goto	i1l917
  1994     0166                     u54_20:
  1995     0166                     i1l913:
  1996     0166  09F2               	comf	i1___awdiv@dividend,f
  1997     0167  09F3               	comf	i1___awdiv@dividend+1,f
  1998     0168  0AF2               	incf	i1___awdiv@dividend,f
  1999     0169  1903               	skipnz
  2000     016A  0AF3               	incf	i1___awdiv@dividend+1,f
  2001     016B                     i1l915:
  2002     016B  3001               	movlw	1
  2003     016C  06F5               	xorwf	i1___awdiv@sign,f
  2004     016D                     i1l917:
  2005     016D  01F6               	clrf	i1___awdiv@quotient
  2006     016E  01F7               	clrf	i1___awdiv@quotient+1
  2007     016F                     i1l919:
  2008     016F  0870               	movf	i1___awdiv@divisor,w
  2009     0170  0471               	iorwf	i1___awdiv@divisor+1,w
  2010     0171  1903               	btfsc	3,2
  2011     0172  2974               	goto	u55_21
  2012     0173  2975               	goto	u55_20
  2013     0174                     u55_21:
  2014     0174  29AA               	goto	i1l939
  2015     0175                     u55_20:
  2016     0175                     i1l921:
  2017     0175  3001               	movlw	1
  2018     0176  00F4               	movwf	i1___awdiv@counter
  2019     0177  2981               	goto	i1l927
  2020     0178                     i1l923:
  2021     0178  3001               	movlw	1
  2022     0179                     u56_25:
  2023     0179  1003               	clrc
  2024     017A  0DF0               	rlf	i1___awdiv@divisor,f
  2025     017B  0DF1               	rlf	i1___awdiv@divisor+1,f
  2026     017C  3EFF               	addlw	-1
  2027     017D  1D03               	skipz
  2028     017E  2979               	goto	u56_25
  2029     017F                     i1l925:
  2030     017F  3001               	movlw	1
  2031     0180  07F4               	addwf	i1___awdiv@counter,f
  2032     0181                     i1l927:
  2033     0181  1FF1               	btfss	i1___awdiv@divisor+1,7
  2034     0182  2984               	goto	u57_21
  2035     0183  2985               	goto	u57_20
  2036     0184                     u57_21:
  2037     0184  2978               	goto	i1l923
  2038     0185                     u57_20:
  2039     0185                     i1l929:
  2040     0185  3001               	movlw	1
  2041     0186                     u58_25:
  2042     0186  1003               	clrc
  2043     0187  0DF6               	rlf	i1___awdiv@quotient,f
  2044     0188  0DF7               	rlf	i1___awdiv@quotient+1,f
  2045     0189  3EFF               	addlw	-1
  2046     018A  1D03               	skipz
  2047     018B  2986               	goto	u58_25
  2048     018C  0871               	movf	i1___awdiv@divisor+1,w
  2049     018D  0273               	subwf	i1___awdiv@dividend+1,w
  2050     018E  1D03               	skipz
  2051     018F  2992               	goto	u59_25
  2052     0190  0870               	movf	i1___awdiv@divisor,w
  2053     0191  0272               	subwf	i1___awdiv@dividend,w
  2054     0192                     u59_25:
  2055     0192  1C03               	skipc
  2056     0193  2995               	goto	u59_21
  2057     0194  2996               	goto	u59_20
  2058     0195                     u59_21:
  2059     0195  299D               	goto	i1l935
  2060     0196                     u59_20:
  2061     0196                     i1l931:
  2062     0196  0870               	movf	i1___awdiv@divisor,w
  2063     0197  02F2               	subwf	i1___awdiv@dividend,f
  2064     0198  0871               	movf	i1___awdiv@divisor+1,w
  2065     0199  1C03               	skipc
  2066     019A  03F3               	decf	i1___awdiv@dividend+1,f
  2067     019B  02F3               	subwf	i1___awdiv@dividend+1,f
  2068     019C                     i1l933:
  2069     019C  1476               	bsf	i1___awdiv@quotient,0
  2070     019D                     i1l935:
  2071     019D  3001               	movlw	1
  2072     019E                     u60_25:
  2073     019E  1003               	clrc
  2074     019F  0CF1               	rrf	i1___awdiv@divisor+1,f
  2075     01A0  0CF0               	rrf	i1___awdiv@divisor,f
  2076     01A1  3EFF               	addlw	-1
  2077     01A2  1D03               	skipz
  2078     01A3  299E               	goto	u60_25
  2079     01A4                     i1l937:
  2080     01A4  3001               	movlw	1
  2081     01A5  02F4               	subwf	i1___awdiv@counter,f
  2082     01A6  1D03               	btfss	3,2
  2083     01A7  29A9               	goto	u61_21
  2084     01A8  29AA               	goto	u61_20
  2085     01A9                     u61_21:
  2086     01A9  2985               	goto	i1l929
  2087     01AA                     u61_20:
  2088     01AA                     i1l939:
  2089     01AA  0875               	movf	i1___awdiv@sign,w
  2090     01AB  1903               	btfsc	3,2
  2091     01AC  29AE               	goto	u62_21
  2092     01AD  29AF               	goto	u62_20
  2093     01AE                     u62_21:
  2094     01AE  29B4               	goto	i1l943
  2095     01AF                     u62_20:
  2096     01AF                     i1l941:
  2097     01AF  09F6               	comf	i1___awdiv@quotient,f
  2098     01B0  09F7               	comf	i1___awdiv@quotient+1,f
  2099     01B1  0AF6               	incf	i1___awdiv@quotient,f
  2100     01B2  1903               	skipnz
  2101     01B3  0AF7               	incf	i1___awdiv@quotient+1,f
  2102     01B4                     i1l943:
  2103     01B4  0877               	movf	i1___awdiv@quotient+1,w
  2104     01B5  00F1               	movwf	?i1___awdiv+1
  2105     01B6  0876               	movf	i1___awdiv@quotient,w
  2106     01B7  00F0               	movwf	?i1___awdiv
  2107     01B8                     i1l330:
  2108     01B8  0008               	return
  2109     01B9                     __end_ofi1___awdiv:
  2110     0002                     ___latbits      equ	2
  2111     007E                     btemp           set	126	;btemp
  2112     007E                     wtemp0          set	126
  2113                           
  2114                           	psect	config
  2115                           
  2116                           ;Config register CONFIG @ 0x2007
  2117                           ;	Oscillator Selection bits
  2118                           ;	FOSC = HS, HS oscillator
  2119                           ;	Watchdog Timer Enable bit
  2120                           ;	WDTE = OFF, WDT disabled
  2121                           ;	Power-up Timer Enable bit
  2122                           ;	PWRTE = OFF, PWRT disabled
  2123                           ;	Brown-out Reset Enable bit
  2124                           ;	BOREN = ON, BOR enabled
  2125                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2126                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  2127                           ;	Data EEPROM Memory Code Protection bit
  2128                           ;	CPD = OFF, Data EEPROM code protection off
  2129                           ;	Flash Program Memory Write Enable bits
  2130                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2131                           ;	In-Circuit Debugger Mode bit
  2132                           ;	DEBUG = OFF, In-Circuit Debugger disabled, RB6 and RB7 are general purpose I/O pins
  2133                           ;	Flash Program Memory Code Protection bit
  2134                           ;	CP = OFF, Code protection off
  2135     2007                     	org	8199
  2136     2007  3F7A               	dw	16250

Data Sizes:
    Strings     71
    Constant    0
    Data        1
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     14      18
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    txstr@a	PTR const unsigned char  size(1) Largest target is 40
		 -> STR_1(CODE[40]), STR_2(CODE[31]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_buttonISR
    _buttonISR->i1___awdiv
    i1_txstr->i1_tx

Critical Paths under _main in BANK0

    _main->___awdiv
    _txstr->_tx

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     704
                                             12 BANK0      2     2      0
                            ___awdiv
                            ___awmod
                     _interrupt_init
                            _ser_int
                         _timer1Init
                                 _tx
                              _txstr
 ---------------------------------------------------------------------------------
 (1) _txstr                                                1     0      1      75
                                              5 BANK0      1     0      1
                                 _tx
 ---------------------------------------------------------------------------------
 (2) _tx                                                   1     1      0      29
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _timer1Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ser_int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interrupt_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     298
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     302
                                              4 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0     749
                                              0 BANK0      4     4      0
                          _buttonISR
 ---------------------------------------------------------------------------------
 (4) _buttonISR                                            4     4      0     749
                                              8 COMMON     4     4      0
                          i1___awdiv
                          i1___awmod
                               i1_tx
                            i1_txstr
 ---------------------------------------------------------------------------------
 (5) i1_txstr                                              1     0      1      75
                                              1 COMMON     1     0      1
                               i1_tx
 ---------------------------------------------------------------------------------
 (6) i1_tx                                                 1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) i1___awmod                                            6     2      4     298
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (5) i1___awdiv                                            8     4      4     302
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___awmod
   _interrupt_init
   _ser_int
   _timer1Init
   _tx
   _txstr
     _tx

 _ISR (ROOT)
   _buttonISR
     i1___awdiv
     i1___awmod
     i1_tx
     i1_txstr
       i1_tx

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80     14      18     22.5%
BITBANK0            80      0       0      0.0%
COMMON              14     12      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      32      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Mon Dec 02 14:11:03 2024

                          pc 0002                           l60 032F                           l63 0333  
                         l72 0306                           l66 0339                           l75 0343  
                         l78 0355                 ___awdiv@sign 0029                           _tx 0330  
                         fsr 0004       __end_of_interrupt_init 0356                          l330 00F2  
                        l343 0211                          ?_tx 0070                          l891 0333  
                        l893 0337                          l991 02E7                          l985 0323  
                        l993 02E8                          l987 033A                          l995 02F4  
                        l989 034E                          l997 02F8                          _RB0 0030  
                        u510 0337                          u511 0336                          _ISR 02B6  
                        u800 00BF                          u720 0306                          u801 00BE  
                        u721 0305                          u820 00D0                          u900 01E6  
                        u821 00CF                          u901 01E5                          u910 01F0  
                        u815 00C0                          u911 01EF                          u840 00E4  
                        u760 0095                          u841 00E3                          u825 00CC  
                        u761 0094                          u850 00E9                          u770 00A0  
                        u930 0203                          u851 00E8                          u835 00D8  
                        u771 009F                          u931 0202                          u915 01EC  
                        u780 00AF                          u940 0208                          u860 01C0  
                        u781 00AE                          u941 0207                          u925 01F7  
                        u861 01BF                          u870 01CB                          u950 0044  
                        u871 01CA                          u951 0043                          u880 01D6  
                        u881 01D5                          u795 00B3                          u895 01DA  
                        fsr0 0004                 ___awmod@sign 0029                          tx@a 0024  
                       ??_tx 0024                         ?_ISR 0070                         l1021 008E  
                       l1031 00A0                         l1023 0091                         l1111 0046  
                       l1103 0024                         l1041 00B2                         l1033 00A5  
                       l1025 0095                         l1113 004D                         l1105 002A  
                       l1051 00D6                         l1043 00B9                         l1035 00A7  
                       l1027 009A                         l1115 0068                         l1107 0039  
                       l1061 00EE                         l1053 00D7                         l1045 00BB  
                       l1037 00A9                         l1029 009C                         l1117 0083  
                       l1109 0044                         l1055 00DE                         l1047 00BF  
                       l1039 00AF                         l1071 01C5                         l1119 0089  
                       l1049 00D0                         l1057 00E4                         l1081 01D9  
                       l1073 01C7                         l1065 01B9                         l1059 00E9  
                       l1091 01F6                         l1083 01E0                         l1075 01CB  
                       l1067 01BC                         l1093 01FD                         l1085 01E2  
                       l1077 01D0                         l1069 01C0                         l1087 01E6  
                       l1079 01D6                         l1095 0203                         l1097 0208  
                       l1089 01F0                         l1099 020D                         STR_1 026F  
                       STR_2 0297                         i1l63 0345                         i1l72 0322  
                       i1l66 034D                         i1l91 0155                         i1l86 02DA  
                       _TXIF 0064                         i1_tx 0344                         _main 0024  
                       btemp 007E                         start 0012              __end_ofi1_txstr 0323  
                      ??_ISR 0020                        ?i1_tx 0070                        ?_main 0070  
             i1___awdiv@sign 0075              __end_of___awdiv 00F3              __end_of___awmod 0212  
            ?_interrupt_init 0070              ___awdiv@divisor 0024                        _T1CON 0010  
                      i1l330 01B8                        i1l343 0268                        i1l901 0316  
                      i1l911 0162                        i1l903 0156                        i1l921 0175  
                      i1l913 0166                        i1l905 0157                        i1l931 0196  
                      i1l923 0178                        i1l915 016B                        i1l907 015B  
                      i1l941 01AF                        i1l933 019C                        i1l925 017F  
                      i1l917 016D                        i1l909 0160                        i1l943 01B4  
                      i1l935 019D                        i1l927 0181                        i1l919 016F  
                      i1l951 0217                        i1l937 01A4                        i1l929 0185  
                      i1l961 022D                        i1l953 021C                        i1l939 01AA  
                      i1l971 0247                        i1l963 0230                        i1l955 021E  
                      i1l947 0212                        i1l981 0264                        i1l973 024D  
                      i1l965 0237                        i1l957 0222                        i1l949 0213  
                      i1l975 0254                        i1l967 0239                        i1l959 0227  
                      i1l887 0345                        i1l895 0307                        i1l969 023D  
                      i1l977 025A                        i1l889 034B                        i1l897 0308  
                      i1l979 025F                        i1l899 0314                        i1l999 00F3  
            ___awdiv@counter 0028                        _RCSTA 0018                        u50_20 034B  
                      u50_21 034A                        _SPBRG 0099                        u52_20 0322  
                      u52_21 0321                        u60_25 019E                        u61_20 01AA  
                      u53_20 015B                        u61_21 01A9                        u53_21 015A  
                      u62_20 01AF                        u54_20 0166                        u70_20 025A  
                      u62_21 01AE                        u54_21 0165                        u70_21 0259  
                      u55_20 0175                        u71_20 025F                        u63_20 0217  
                      u55_21 0174                        u71_21 025E                        u63_21 0216  
                      u64_20 0222                        u64_21 0221                        u56_25 0179  
                      u57_20 0185                        u65_20 022D                        u73_20 00FE  
                      u57_21 0184                        u65_21 022C                        u73_21 00FD  
                      u74_20 0103                        u74_21 0102                        u58_25 0186  
                      u66_25 0231                        u59_20 0196                        u67_20 023D  
                      u75_20 0116                        u59_21 0195                        u67_21 023C  
                      u75_21 0115                        u59_25 0192                        u68_20 0247  
                      u68_21 0246                        u68_25 0243                        u69_25 024E  
                      u96_20 02BA                        u96_21 02B9                        u97_20 02C8  
                      u97_21 02C7                        _TXREG 0019                        u98_20 02D4  
                      u98_21 02D3                        u99_27 0109                        _TXSTA 0098  
                      i1tx@a 0070               i1___awmod@sign 0075                        _txstr 02E7  
            __end_of_ser_int 0330                        pclath 000A                        status 0003  
                      wtemp0 007E                 __end_ofi1_tx 034E              __initialization 0015  
            _prevButtonState 007D                 __end_of_main 008E                       ??i1_tx 0070  
                     ??_main 002C             ___awdiv@dividend 0026                       ?_txstr 0025  
                     i1l1001 00F9                       i1l1011 0118                       i1l1003 00FE  
                     i1l1013 011F                       i1l1005 0103                       i1l1015 0136  
                     i1l1007 0110                       i1l1017 014D                       i1l1009 0116  
                     i1l1121 02B6                       i1l1019 0153                       i1l1131 02CA  
                     i1l1123 02BA                       i1l1125 02BB                       i1l1133 02D0  
                     i1l1135 02D4                       i1l1127 02C1                       i1l1137 02D9  
                     i1l1129 02C8                       _TMR1IF 0060                    ??i1_txstr 0072  
                  ??___awdiv 0028                    ??___awmod 0028             ___awdiv@quotient 002A  
            ___awmod@divisor 0024              ___awmod@counter 0028            __end_ofi1___awdiv 01B9  
          __end_ofi1___awmod 0269                 __pdataCOMMON 007D                       saved_w 007E  
                  ??_ser_int 0024                       txstr@a 0025      __end_of__initialization 0020  
             __pcstackCOMMON 0070                __end_of_txstr 0307                   __end_of_tx 033A  
             _OPTION_REGbits 0081                _buttonPresses 007C                      ??_txstr 0026  
                 __pbssBANK0 002E                   __pmaintext 0024             ??_interrupt_init 0024  
                 __pintentry 0004           i1___awdiv@dividend 0072                   __stringtab 0269  
                    i1_txstr 0307           i1___awdiv@quotient 0076                      ___awdiv 008E  
                    ___awmod 01B9                      __ptext1 02E7                      __ptext2 0330  
                    __ptext3 033A                      __ptext4 0323                      __ptext5 034E  
                    __ptext6 01B9                      __ptext7 008E                      __ptext8 02B6  
                    __ptext9 00F3            __end_of_buttonISR 0156             ___awmod@dividend 0026  
                    _seconds 002E                      _ser_int 0323         end_of_initialization 0020  
                 _timer1Init 033A                    _TRISBbits 0086                    _TRISCbits 0087  
                  i1___awdiv 0156                    i1___awmod 0212                __pidataCOMMON 0356  
        start_initialization 0015                  __end_of_ISR 02E7                   ?i1___awdiv 0070  
                 ?i1___awmod 0070                  ?_timer1Init 0070           i1___awmod@dividend 0072  
                __pbssCOMMON 007C                    ___latbits 0002                __pcstackBANK0 0020  
                   ?i1_txstr 0071                     ?___awdiv 0024                     ?___awmod 0024  
          i1___awdiv@divisor 0070  buttonISR@currentButtonState 007B            i1___awdiv@counter 0074  
                  __pstrings 0269                     ?_ser_int 0070                  ??i1___awdiv 0074  
                ??i1___awmod 0074                    _buttonISR 00F3            interrupt_function 0004  
                   _PIE1bits 008C                  __stringbase 026E                   ?_buttonISR 0070  
                   i1txstr@a 0071            i1___awmod@divisor 0070            i1___awmod@counter 0074  
         __end_of__stringtab 026F                     __ptext10 0307                     __ptext11 0344  
                   __ptext12 0212                     __ptext13 0156                 ??_timer1Init 0024  
                 _INTCONbits 000B                  ??_buttonISR 0078           __end_of_timer1Init 0344  
                   intlevel1 0000                    stringcode 0269                _overflowCount 0030  
             _interrupt_init 034E                     stringdir 0269                     stringtab 0269  
